// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/auth/verify": {
            "post": {
                "description": "Verify the Firebase Authentication Token, and return our own App's JWT Token",
                "tags": [
                    "Authentication"
                ],
                "summary": "Verify the Firebase Authentication Token",
                "parameters": [
                    {
                        "description": "Firebase Authentication Token",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.TokenDtoRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.TokenDtoResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/services.TokenDtoFailed"
                        }
                    }
                }
            }
        },
        "/api/groups/all": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Get all the Groups belonging to the current user",
                "tags": [
                    "Group"
                ],
                "summary": "Get all Groups",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/routes.GroupSummaryDto"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/api/groups/create": {
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Create a new Group given a ` + "`" + `CreateGroupDto` + "`" + `.",
                "consumes": [
                    "multipart/form-data"
                ],
                "tags": [
                    "Group"
                ],
                "summary": "Create a new Group",
                "parameters": [
                    {
                        "type": "string",
                        "name": "description",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Group Image",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.GroupSummaryDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrorMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/api/groups/invites": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Gets all invites that are not expired",
                "tags": [
                    "Group"
                ],
                "summary": "Gets all active invites",
                "parameters": [
                    {
                        "type": "integer",
                        "name": "groupId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/routes.GroupInviteDto"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrorMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/api/groups/invites/create": {
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Create an invitation link for a Group that expires after a certain period",
                "tags": [
                    "Group"
                ],
                "summary": "Create an invitation link for a Group",
                "parameters": [
                    {
                        "description": "Details of expiring invitation link",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.CreateGroupInviteDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.GroupInviteDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrorMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/api/groups/invites/invalidate": {
            "put": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Invalidates an invitation so that no one else can join",
                "tags": [
                    "Group"
                ],
                "summary": "Invalidates an invitation",
                "parameters": [
                    {
                        "description": "Details of invite to invalidate",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.InvalidateGroupInviteDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrorMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/api/groups/join/{inviteId}": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Join a group using this invite link",
                "tags": [
                    "Group"
                ],
                "summary": "Join a group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "InviteID (UUID)",
                        "name": "inviteId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrorMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/api/messages/after": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Get {count} number of messages after the message specified by the {messageId}",
                "tags": [
                    "Message"
                ],
                "summary": "Get messages after this message",
                "parameters": [
                    {
                        "type": "integer",
                        "name": "count",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "name": "messageId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/routes.MessageDto"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrorMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/api/messages/all": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Get messages bound by a time range",
                "tags": [
                    "Message"
                ],
                "summary": "Get messages",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date-time",
                        "name": "end",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "name": "groupId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "name": "start",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/routes.MessageDto"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrorMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/api/messages/before": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Get {count} number of messages before the message specified by the {messageId}",
                "tags": [
                    "Message"
                ],
                "summary": "Get messages before this message",
                "parameters": [
                    {
                        "type": "integer",
                        "name": "count",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "name": "messageId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/routes.MessageDto"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrorMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/api/messages/mark_read": {
            "put": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Marks a message as read and sets the last seen message of the user to this message if it's newer",
                "tags": [
                    "Message"
                ],
                "summary": "Mark a message as read",
                "parameters": [
                    {
                        "description": "MarkRead",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.MarkReadDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrorMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/api/messages/send": {
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Send a new message to a ` + "`" + `Group` + "`" + `",
                "tags": [
                    "Message"
                ],
                "summary": "Send a message",
                "parameters": [
                    {
                        "description": "Message",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.SendMessageDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrorMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/api/misc/towns": {
            "get": {
                "description": "Get towns",
                "tags": [
                    "Misc"
                ],
                "summary": "Get towns",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrorMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/api/users/create": {
            "post": {
                "description": "Create a new User given a ` + "`" + `CreateUserDto` + "`" + `.",
                "consumes": [
                    "multipart/form-data"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Create a new User",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "name": "attractions",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "firebaseToken",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "name": "food",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "gender",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "town",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "username",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "User Image",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrorMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/api/users/me/info": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Gets info about a user (me = current user)",
                "tags": [
                    "User"
                ],
                "summary": "Gets info about a user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.UserSummaryDto"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrorMessage"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "routes.CreateGroupInviteDto": {
            "type": "object",
            "required": [
                "expiryOption",
                "groupId"
            ],
            "properties": {
                "expiryOption": {
                    "description": "TODO make this an enum",
                    "type": "string"
                },
                "groupId": {
                    "type": "integer"
                }
            }
        },
        "routes.ErrorMessage": {
            "type": "object",
            "required": [
                "message"
            ],
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "routes.GroupInviteDto": {
            "type": "object",
            "required": [
                "groupId",
                "id",
                "url"
            ],
            "properties": {
                "expiry": {
                    "description": "TODO add comment about null expiry",
                    "type": "string"
                },
                "groupId": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "routes.GroupSummaryDto": {
            "type": "object",
            "required": [
                "description",
                "id",
                "imageLink",
                "name",
                "unreadMessagesCount"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "imageLink": {
                    "type": "string"
                },
                "lastSeenMessage": {
                    "$ref": "#/definitions/routes.MessageDto"
                },
                "name": {
                    "type": "string"
                },
                "unreadMessagesCount": {
                    "type": "integer"
                }
            }
        },
        "routes.InvalidateGroupInviteDto": {
            "type": "object",
            "required": [
                "inviteId"
            ],
            "properties": {
                "inviteId": {
                    "type": "string"
                }
            }
        },
        "routes.MarkReadDto": {
            "type": "object",
            "required": [
                "messageId"
            ],
            "properties": {
                "messageId": {
                    "type": "integer"
                }
            }
        },
        "routes.MessageDto": {
            "type": "object",
            "required": [
                "content",
                "id",
                "sentAt",
                "user"
            ],
            "properties": {
                "content": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "sentAt": {
                    "type": "string",
                    "format": "date-time"
                },
                "user": {
                    "$ref": "#/definitions/routes.UserSummaryDto"
                }
            }
        },
        "routes.SendMessageDto": {
            "type": "object",
            "required": [
                "content",
                "groupId"
            ],
            "properties": {
                "content": {
                    "type": "string"
                },
                "groupId": {
                    "type": "integer"
                }
            }
        },
        "routes.UserSummaryDto": {
            "type": "object",
            "required": [
                "imageLink",
                "name",
                "username"
            ],
            "properties": {
                "imageLink": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "services.TokenDtoFailed": {
            "type": "object",
            "required": [
                "code",
                "message"
            ],
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "services.TokenDtoRequest": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "services.TokenDtoResponse": {
            "type": "object",
            "required": [
                "code",
                "expire",
                "token"
            ],
            "properties": {
                "code": {
                    "type": "integer"
                },
                "expire": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "JWT": {
            "description": "Type 'Bearer TOKEN' to correctly set the API Key",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Planlah Backend API",
	Description:      "This is the API for planlah's backend API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
